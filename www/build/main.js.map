{"version":3,"sources":["../../src/providers/plant-service.ts","../../src/providers/timesheet-service.ts","../../src/models/bluetooth-message.ts","../../src/providers/transaction-service.ts","../../src/providers/bluetooth-service.ts","../../node_modules/@angular/core/src/linker lazy","../../src/pages/login/login.ts","../../src/pages/tabs/tabs.ts","../../src/pages/transaction/transaction.ts","../../src/pages/timesheet/timesheet.ts","../../src/pages/settings/settings.ts","../../src/app/main.ts","../../src/app/app.module.ts","../../src/app/app.component.ts","../../src/pipes.ts","../../src/providers/rollbar-service.ts","../../src/config.ts","../../src/providers/configuration-service.ts","../../src/providers/sql-service.ts","../../src/providers/operator-service.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import 'rxjs/add/operator/toPromise';\nimport { Injectable }   from '@angular/core';\nimport { Http }         from '@angular/http';\n\nimport { Events }       from 'ionic-angular';\n\nimport { Config }       from '../config';\nimport { SqlService }   from './sql-service';\n\n\n@Injectable()\nexport class PlantService {\n\n    private http: Http;\n    private configuration: Config;\n    private storage: SqlService;\n    private events: Events;\n    private in_progress:boolean = false;\n\n    constructor(http: Http, configuration: Config, storage: SqlService, events:Events) {\n        console.log('[PlantService] - constructor() :: ');        \n        this.http           = http;\n        this.configuration  = configuration;\n        this.storage        = storage;\n        this.events         = events;\n    }\n\n    public init() {        \n        console.log('[PlantService] - init() :: Preparing database table');\n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS plants (id INTEGER PRIMARY KEY, plant_id INTEGER, plant_no INTEGER, tail_no TEXT)');\n    }\n\n    async load() {\n        console.log('[PlantService] - load() :: Loading plants from the API');\n\n        if(this.in_progress)\n        {\n            console.log('[PlantService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n        let result = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/plants-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n            \n        console.log('[PlantService] - load() :: Plants loaded from the API.');\n\n        console.log('[PlantService] - load() :: Deleting plants from the cache.');\n        await this.deleteAll();\n        console.log('[PlantService] - load() :: Plants deleted from the cache.');\n\n        console.log('[PlantService] - load() :: Creating plants in the cache.');\n        let promises = result.json().Plant.map(async (item) => {\n            // console.log('[PlantService] - load() :: Creating plant in the cache.', item);\n            await this.create(item);\n        });\n        console.info('[PlantService] - load() :: Plants loaded from the API and cached.');\n        this.events.publish('plants:loaded');\n        console.info('[PlantService] - load() :: Event \"plants:loaded\" published.');\n\n        this.in_progress = false;\n\n        return Promise.all(promises)\n    }\n\n    async findAll() {\n        let query = 'SELECT plant_id, plant_no, tail_no FROM plants';\n        return this.storage.executeSql(query);\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT plant_id, plant_no, tail_no FROM plants WHERE plant_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async deleteAll() {\n        console.log('[PlantService] - deleteAll() :: Deleting plants from the cache.');\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM plants'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"plants\"')\n        ]);\n    }\n\n    async create(plant) {\n        let query = 'INSERT INTO plants (plant_id, plant_no, tail_no) VALUES (?, ?, ?)';\n        return this.storage.executeSql(query, [plant.plant_id, plant.plant_no, plant.tail_no]);\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/plant-service.ts","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport { Http }         from '@angular/http';\nimport { DatePipe }     from '@angular/common';\n\nimport { SqlService }   from './sql-service';\nimport { Config }       from '../config';\n\n@Injectable()\nexport class TimesheetService {\n\n  private configuration: Config;\n  private storage: SqlService;\n  private http:Http;\n\n  constructor(http:Http, configuration: Config, storage: SqlService) {\n    console.log('[TimesheetService] - constructor() :: ');            \n    this.http = http;\n    this.configuration = configuration;\n    this.storage = storage;\n  }\n\n  public init() {\n    console.log('[TimesheetService] - init() :: Preparing database table');    \n    return this.storage.executeSql(`CREATE TABLE IF NOT EXISTS timesheets (\n      timesheet_id INTEGER PRIMARY KEY AUTOINCREMENT,\n      operator_id INTEGER, \n      plant_id INTEGER, \n      start_date TEXT,\n      end_date TEXT, \n      start_hours TEXT, \n      end_hours TEXT, \n      synced_at TEXT\n    )`);\n  }\n\n  async create(data) {\n    console.log('[TimesheetService] - create() :: Creating timesheet in the cache:', data);\n    let insert_query = 'INSERT INTO timesheets (operator_id, plant_id, start_date, end_date, start_hours, end_hours) VALUES (?, ?, ?, ?, ?, ?)';\n    let result = await this.storage.executeSql(\n      insert_query,\n      [\n        data.operator_id,\n        data.plant_id,\n        data.start_date,\n        data.end_date,\n        data.start_hours,\n        data.end_hours\n      ]\n    );\n\n    console.log('[TimesheetService] - create() :: Timesheet created in the cache:', result.res.insertId);\n\n    try {\n      console.log('[TimesheetService] - create() :: Creating timesheetService in the API:', result);\n      data.timesheet_id = result.res.insertId;\n      let api_result = await this.http\n        .post(this.configuration.API_ENDPOINT + '/air-trans/', data)\n        .toPromise();\n\n        console.log('[TimesheetService] - create() :: Timesheet created in the API:', api_result);\n\n        console.log('[TimesheetService] - create() :: Updating timesheet in the cache as synced:', api_result);\n        let update_query  = `UPDATE timesheets SET synced_at = (?) WHERE timesheet_id = (?)`;\n        let datePipe      = new DatePipe(this.configuration.LOCALE);\n        result            = await this.storage.executeSql(\n                                update_query, \n                                [\n                                datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), \n                                data.timesheet_id\n                                ]\n        );\n        console.log('[TimesheetService] - create() :: Timesheet updated in the cache as synced:', result);\n        console.info('[TimesheetService] - create() :: Timesheet uploaded and marked as synced');\n\n    }\n    catch (exception) {\n      console.warn('[TimesheetService] - create() :: Failed to create timesheet in the API:', data, exception);\n    }\n    return result;\n  }\n\n  async upload() {\n    console.log('[TimesheetService] - upload() :: Finding non-synced timesheets');\n    let select_query = 'SELECT timesheet_id, operator_id, plant_id, start_date, end_date, start_hours, end_hours, synced_at FROM timesheets WHERE synced_at IS NULL';\n    let timesheets = await this.storage.executeSql(select_query);\n    console.log('[TimesheetService] - upload() :: Found non-synced timesheets:', timesheets.res.rows.length);    \n    let promises = Array.from(timesheets.res.rows).map(async (timesheet: any) => {\n      console.log('[TimesheetService] - upload() :: Updating non-synced timesheet', timesheet);\n\n      await this.http\n        .post(this.configuration.API_ENDPOINT + '/air-trans/', timesheet)\n        .toPromise();\n\n      let update_query = 'UPDATE timesheets SET synced_at = (?) WHERE timesheet_id = (?)';\n      let datePipe = new DatePipe(this.configuration.LOCALE);\n      return await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), timesheet.timesheet_id])\n    });\n    return Promise.all(promises)\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/providers/timesheet-service.ts","export class BluetoothMessage {\n    public static readonly ESCAPE           = String.fromCharCode(0x0A);\n    public static readonly FRAME_BOUNDARY   = String.fromCharCode(0x1C);\n}\n\nexport class BluetoothTransactionRequest {\n\n    public toString():String\n    {\n        return `${BluetoothMessage.FRAME_BOUNDARY}{\"type\":\"transactionRequest\"}${BluetoothMessage.FRAME_BOUNDARY}`;\n    }\n}\n\nexport class BluetoothAcknowledgement {\n\n    public toString():String\n    {\n        return `${BluetoothMessage.FRAME_BOUNDARY}{\"type\":\"OK\"}${BluetoothMessage.FRAME_BOUNDARY}`;\n    }\n}\n\nexport class BluetoothResponse {\n\n    private data:any    = null;\n    private type:string = null;\n\n    constructor(raw:String) {\n        console.debug(`[BluetoothResponse] - constructor() :: \"${raw}\"`);\n        \n        if(raw != `${BluetoothMessage.FRAME_BOUNDARY}` && raw != `${BluetoothMessage.ESCAPE + BluetoothMessage.FRAME_BOUNDARY}` && raw != '' ) {\n            try {\n                let packet      = JSON.parse(String(raw.slice(0, -1)));\n                this.data       = packet.data;\n                this.type       = packet.type;\n            }\n            catch(error) {\n                console.error('[BluetoothResponse] - constructor() ::', error);               \n                throw error;\n            }\n        }\n    }\n\n    public getData():any {\n        return this.data;\n    }\n\n    public isBoundaryOnly()\n    {\n        return this.data == null\n    }\n\n    public isEmpty():Boolean\n    {\n        return Object.keys(this.data).length == 0;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/models/bluetooth-message.ts","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport { Http }         from '@angular/http';\nimport { DatePipe }     from '@angular/common';\nimport { Config }       from '../config';\nimport { SqlService }   from './sql-service';\n\n@Injectable()\nexport class TransactionService {\n\n    private configuration: Config;\n    private storage: SqlService;\n    private http: Http;\n\n    constructor(http: Http, configuration: Config, storage: SqlService) {\n        console.log('[TransactionService] - constructor() :: ');\n        this.http = http;\n        this.configuration = configuration;\n        this.storage = storage;\n\n    }\n\n    public init() {\n        console.log('[TransactionService] - init() :: Preparing database table');\n        return  this.storage.executeSql(`CREATE TABLE IF NOT EXISTS transactions (\n            transaction_id INTEGER PRIMARY KEY AUTOINCREMENT,\n            pad_id TEXT,\n            operator_id INTEGER,\n            plant_id INTEGER,\n            trailer_id INTEGER,\n            odometer INTEGER,\n            battery_percentage INTEGER,\n            long TEXT,\n            lat TEXT,\n            end_value TEXT,\n            end_total_value TEXT,\n            transaction_end_date TEXT,\n            synced_at TEXT\n        )`);\n    }\n\n    async create(transaction) {\n\n        console.log('[TransactionService] - create() :: Creating transaction in the cache:', transaction);\n        let datePipe = new DatePipe(this.configuration.LOCALE);\n        // transaction.transaction_end_date is a timestamp, but in local time ...\n        let transaction_end_date            = transaction.transaction_end_date;\n        transaction_end_date                = transaction_end_date + (new Date()).getTimezoneOffset() * 60;\n        transaction.transaction_end_date    = datePipe.transform(new Date(transaction_end_date * 1000), 'y-MM-dd HH:mm:ss')\n        let insert_query = `INSERT INTO transactions (\n            pad_id, \n            operator_id, \n            plant_id, \n            trailer_id, \n            odometer, \n            battery_percentage, \n            long, \n            lat, \n            end_value, \n            end_total_value, \n            transaction_end_date\n          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;\n\n        let result = await this.storage.executeSql(\n            insert_query,\n            [\n                transaction.pad_id,\n                transaction.operator_id,\n                transaction.plant_id,\n                transaction.trailer_id,\n                transaction.odometer,\n                transaction.battery_percentage,\n                transaction.long,\n                transaction.lat,\n                transaction.end_value,\n                transaction.end_total_value,\n                transaction.transaction_end_date\n            ]\n        );\n\n        console.log('[TransactionService] - create() :: Transaction created in the cache:', transaction);\n\n        try {\n            console.log('[TransactionService] - create() :: Uploading transaction in the API:', result);\n            transaction.transaction_id = result.res.insertId;\n            let api_result = await this.http\n                .post(this.configuration.API_ENDPOINT + '/transaction/', transaction)\n                .toPromise();\n\n            console.log('[TransactionService] - create() :: Transaction uploaded to the API:', api_result);\n\n            console.log('[TransactionService] - create() :: Marking transaction in the cache as synced:', api_result);\n            let update_query = 'UPDATE transactions SET synced_at = (?) WHERE transaction_id = (?)';\n            result = await this.storage.executeSql(update_query, [datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'), transaction.transaction_id])\n            console.log('[TransactionService] - create() :: Transaction marked in the cache as synced:', result);\n            console.info('[TransactionService] - create() :: Transaction uploaded and marked as synced');\n\n        }\n        catch (exception) {\n            console.warn('[TransactionService] - create() :: Failed to create transaction in the API:', transaction, exception);\n        }\n        return result;\n    }\n\n    async upload() {\n        console.log('[TransactionService] - upload() :: Finding non-synced transactions');\n        let select_query = `SELECT \n                          transaction_id, \n                          pad_id, \n                          operator_id, \n                          plant_id, \n                          trailer_id, \n                          odometer, \n                          battery_percentage, \n                          long, \n                          lat, \n                          end_value, \n                          end_total_value, \n                          transaction_end_date, \n                          synced_at \n                          FROM transactions WHERE synced_at IS NULL`;\n\n        let transactions = await this.storage.executeSql(select_query);\n        console.log('[TransactionService] - upload() :: Found non-synced transaction:', transactions.res.rows.length);\n        let promises = Array.from(transactions.res.rows).map(async (transaction: any) => {\n            console.log('[TransactionService] - upload() :: Found non-synced transaction', transaction);\n\n            await this.http\n                .post(this.configuration.API_ENDPOINT + '/transaction/', transaction)\n                .toPromise();\n\n            let update_query = 'UPDATE transactions SET synced_at = (?) WHERE transaction_id = (?)';\n            let datePipe = new DatePipe(this.configuration.LOCALE);\n\n            return await this.storage.executeSql(\n                update_query,\n                [\n                    datePipe.transform(Date.now(), 'y-MM-dd HH:mm:ss'),\n                    transaction.transaction_id\n                ]\n            );\n        });\n        return Promise.all(promises);\n    }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/transaction-service.ts","import { Injectable } from '@angular/core';\nimport { BluetoothSerial } from 'ionic-native';\nimport { Events,AlertController} from 'ionic-angular';\nimport { ToastController }      from 'ionic-angular';\n\nimport 'rxjs/add/operator/map';\n\nimport { BluetoothMessage } from '../models/bluetooth-message';\nimport { BluetoothTransactionRequest } from '../models/bluetooth-message';\nimport { BluetoothAcknowledgement } from '../models/bluetooth-message';\nimport { BluetoothResponse } from '../models/bluetooth-message';\n\nimport { Storage }                from '@ionic/storage';\n\n@Injectable()\nexport class BluetoothService {\n\n    protected events: Events;\n    protected toastController: ToastController;\n    protected responses:Array<BluetoothResponse> = [];\n    protected alertCtrl: AlertController;\n    protected deviceCount:number;\n    protected connected: boolean;\n    protected deviceCheckInterval:any;\n    protected previouslyConnectedMeter: string;\n    \n    \n    constructor(events: Events, toastController:ToastController, alertController:AlertController, private storage:Storage) {\n        console.log('[BluetoothService] - constructor() :: ');\n        this.events = events;\n        this.toastController = toastController;\n        this.alertCtrl = alertController;\n        \n        this.deviceCount = 0;\n        this.connected = false;\n        \n        this.deviceCheckInterval = setInterval(() => {\n            this.checkDevices();\n        },10000);        \n        \n        this.previouslyConnectedMeter = \"\";\n        this.storage.get(\"previouslyConnectedMeter\").then((uuid) => {\n            if (uuid){\n                this.previouslyConnectedMeter = uuid;\n            }\n        })\n        \n        \n    }\n\n    \n    private checkDevices(){\n        BluetoothSerial.isConnected().then(() => {\n            BluetoothSerial.list().then(\n                devices     => {\n                    let count = devices.length;\n                    if (count !== this.deviceCount){\n                        this.deviceCount = count;\n                        //prompt user if they want to connect to differant device\n                        this.changeDevice(devices);\n                    }\n                }\n            );\n        });\n                \n    }\n    \n\n    public connect(device:any) {\n        console.log('[BluetoothService] - connect() :: ');\n        BluetoothSerial.isConnected().then(\n            () => this.request(),\n            () => {\n                console.log(`[BluetoothService] - connect() :: Connecting to device ${device.name} (${device.id})`);\n                this.events.publish('meter:connecting');\n                BluetoothSerial.connect(device.id).subscribe(\n                    ()      => this.onConnect(device),\n                    failure => this.onFail(failure)\n                );\n            }\n        );\n    }\n\n    public list() {\n        console.log(`[BluetoothService] - list() :: List bound devices`);\n        this.responses = new Array();\n        this.events.publish('meter:listing');\n        BluetoothSerial.isConnected().then(\n            () => this.request(),\n            () => {\n                BluetoothSerial.list().then(\n                    devices     => {\n                        \n                        if (devices.length === 1){\n                            this.connect(devices[0]);\n                            this.storage.set(\"previouslyConnectedMeter\", devices[0].uuid);\n                            return;\n                        }\n                        else{\n                            if (this.previouslyConnectedMeter){\n                                for (let device of devices){\n                                    if (device.uuid === this.previouslyConnectedMeter){\n                                        this.connect(device);\n                                        return;\n                                    }\n                                }\n                            }\n                            else{\n                                this.selectDevice(devices);\n                            }\n                        }\n                    },\n                    failure     => this.onFail(failure)\n                );\n            }\n        );\n    }\n    \n    private selectDevice(devices){\n        this.events.publish('meter:listingselect');\n        \n        this.deviceCount = devices.length;\n        \n        \n        let inputs = [];\n        let inputsIndexed = {};\n        for (var index in devices){\n            let device = devices[index]\n            inputs.push({\n                type:\"radio\",\n                name:\"device\" + index,\n                value:index,\n                label:device.name\n            });\n            inputsIndexed[index] = device;\n        }\n        \n        let alert = this.alertCtrl.create({\n            title: 'Select Device',\n            inputs: inputs,\n            buttons: [\n            {\n                text: 'Cancel',\n                role: 'cancel',\n                handler: data => {\n                  console.log('Cancel clicked');\n                }\n            },\n            {\n                text: 'Connect',\n                handler: deviceIndex => {\n                  if (deviceIndex){\n                      this.events.publish('meter:listingselected');\n                      let device = inputsIndexed[deviceIndex];\n                      this.storage.set(\"previouslyConnectedMeter\", device.uuid);\n                      this.connect(device);\n                  }\n                }\n            }\n          ]\n        });\n        alert.present();        \n    }\n    \n    \n    private changeDevice(devices){\n        \n        let inputs = [];\n        let inputsIndexed = {};\n        for (var index in devices){\n            let device = devices[index]\n            inputs.push({\n                type:\"radio\",\n                name:\"device\" + index,\n                value:index,\n                label:device.name\n            });\n            inputsIndexed[index] = device;\n        }\n        \n        let alert = this.alertCtrl.create({\n            title: 'Select Device',\n            subTitle: 'The devices in your bluetooth network have changed',\n            message: 'If you wish to change to another meter, select it from the list, otherwise press cancel to continue on the current meter.',\n            inputs: inputs,\n            buttons: [\n            {\n                text: 'Cancel',\n                role: 'cancel',\n                handler: data => {\n                  console.log('Cancel clicked');\n                }\n            },\n            {\n                text: 'Connect',\n                handler: deviceIndex => {\n                  if (deviceIndex){\n                      let device = inputsIndexed[deviceIndex];\n                        this.events.publish('meter:connecting');\n                        this.storage.set(\"previouslyConnectedMeter\", device.uuid);\n                        BluetoothSerial.connect(device.id).subscribe(\n                            ()      => this.onConnect(device),\n                            failure => this.onFail(failure)\n                        );\n                  }\n                }\n            }\n          ]\n        });\n        alert.present();        \n    }    \n\n    public request() {\n        console.log('[BluetoothService] - request() :: Sending transaction request to the BT device');\n        this.events.publish('meter:reading');\n        alert(\"making bluetooth request\");\n        alert((new BluetoothTransactionRequest()).toString());\n        BluetoothSerial.write((new BluetoothTransactionRequest()).toString()).then(\n            () => this.onRequestComplete(),\n            failure => this.onFail(failure)\n        );\n    }\n\n    public requestAll() {\n        console.log('[BluetoothService] - requestAll() :: Sending transaction request to the BT device');\n    }\n\n    public acknowledge() {\n        console.log('[BluetoothService] - acknowledge() :: Sending acknowledge to the BT device');\n        alert(\"writing acknowledge\");\n        alert((new BluetoothAcknowledgement()).toString());\n        BluetoothSerial.write((new BluetoothAcknowledgement()).toString()).then(\n            ()      => this.onAcknowledge(),\n            failure => this.onFail(failure)\n        );\n    }\n\n    protected onConnect(device:any) {\n        console.info(`[BluetoothService] - onConnect() :: Connected to BT device ${device.id}.`);\n        let alertBox = this.alertCtrl.create({\n          title: 'Success',\n          subTitle: 'You are now connected to ' + device.name,\n          buttons: ['Dismiss']\n        });\n        alertBox.present();        \n        \n        alert(\"subscribing to bluetooth channel\");\n        alert(`${BluetoothMessage.FRAME_BOUNDARY}`);\n        BluetoothSerial.subscribe(`${BluetoothMessage.FRAME_BOUNDARY}`).subscribe(\n            data    => this.onData(data),\n            failure => this.onFail(failure)\n        );\n        this.request();\n    }\n\n    protected onData(data) {\n        alert(\"response received\");\n        alert(data);\n        let response;\n        try {\n            response = new BluetoothResponse(data);\n        } catch (error) {\n            alert(\"failed to create new response object\");\n            this.onFail(error);\n            return;\n        }\n        \n        \n        alert(JSON.stringify(response));\n\n        // If the response is just a boundary, drop the response.\n        if(response.isBoundaryOnly()) {\n            alert(\"response is boundary\");\n            return;\n        }\n\n        // If the response is not empty, store it until we get an empty response\n        if (!response.isEmpty()) {\n            alert(\"response is empty\");\n            console.log('[BluetoothService] - onData() :: Received data from the BT device', response);\n            this.responses.push(response);\n            this.acknowledge();\n        }\n        // If the response is empty, we reached the end of the stack, send the last data \n        else {\n            console.log('[BluetoothService] - onData() :: Finished receiving data from the BT device.');\n            alert(\"there is a response\");\n            \n            if(this.responses && this.responses.length > 0) {\n                console.log('[BluetoothService] - onData() :: Publishing the received data.', this.responses);\n                console.info('[BluetoothService] - onData() :: Publishing the received data.');\n                this.events.publish('meter:data', this.responses);\n            }\n\n            this.events.publish('meter:complete');\n        }\n    }\n\n    protected onRequestComplete() {\n        alert(\"request complete\");\n        console.log('[BluetoothService] - onRequestComplete() :: Transaction request sent to BT device');\n    }\n\n    protected onAcknowledge() {\n        console.log('[BluetoothService] - onAcknowledge() :: Acknowledge sent to BT device');\n        alert(\"bluetooth acknowledged\");\n        this.request();\n    }\n\n    protected onFail(failure) {\n        console.warn('[BluetoothService] - onFail() :: ', failure);\n        this.events.publish('meter:complete');\n\n        let toast = this.toastController.create({\n            message: failure,\n            duration: 2000,\n            cssClass: 'toast-error'\n        });\n        this.events.publish('database:synced');\n        toast.present();\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/bluetooth-service.ts","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 240;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/core/src/linker lazy\n// module id = 240\n// module chunks = 0","import { Component }            from '@angular/core';\nimport { FormBuilder }          from '@angular/forms';\nimport { FormGroup }            from '@angular/forms';\nimport { Validators }           from '@angular/forms';\nimport { NavController }        from 'ionic-angular';\n\nimport { TabsPage }             from '../tabs/tabs';\nimport { OperatorService }      from '../../providers/operator-service';\nimport { ConfigurationService } from '../../providers/configuration-service';\n\n@Component({\n    selector: 'page-login',\n    templateUrl: 'login.html'\n})\nexport class LoginPage {\n\n    public loginForm: FormGroup;\n    public state:String = 'default';\n\n    protected navigation: NavController;\n    protected configurationService: ConfigurationService;\n    protected operatorService: OperatorService;\n\n\n\n    constructor(public navigationController: NavController, private builder: FormBuilder, configurationService: ConfigurationService, operatorService: OperatorService) {\n\n        this.loginForm = builder.group({\n            'pin_no': ['', Validators.required]\n        })\n        this.navigation             = navigationController;\n        this.configurationService   = configurationService;\n        this.operatorService        = operatorService;\n\n        this.configurationService.get('operator').then(operator => {\n            console.log('[LoginPage] constructor() :: ', operator)\n            if (operator != null) {\n                this.navigation.setRoot(TabsPage);\n            }\n        });\n\n    }\n\n    public onSubmit(data) {\n        console.log('[LoginPage] - onSubmit() :: Attempt to login ', data)\n        this.state = 'working';\n\n        this.operatorService.findByPinCode(data.pin_no).then(\n            operator => {\n\n                if(operator.res.rows.length == 1) {\n                    console.log('[LoginPage] - onSubmit() :: Found operator for the provided PIN', operator.res.rows.item(0));\n                    this.configurationService.set('operator', operator.res.rows.item(0)).then(\n                        result => {\n                            console.log('[LoginPage] - onSubmit() :: Current operator set in config to:', operator.res.rows.item(0));\n                            this.state = 'default';\n                            this.navigation.setRoot(TabsPage);\n                        },\n                        failure => {\n                            console.log('[LoginPage] - onSubmit() :: Failed to set the current operator to config:', failure);\n                            this.state = 'default';\n                            this.configurationService.remove('operator');\n                        }\n                    );\n                }\n                else {\n                    console.log('[LoginPage] - onSubmit() :: Found incorrect number of operators for the provided PIN', operator.res.rows.length);\n                    this.state = 'default';\n                    this.configurationService.remove('operator');\n                }\n\n            },\n            failure => {\n                console.log('[LoginPage] - onSubmit() :: Failed to find operator for the provided PIN', failure);\n                this.state = 'default';\n                this.configurationService.remove('operator');\n            });\n\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts","import { Component } from '@angular/core';\nimport { PopoverController } from 'ionic-angular';\nimport { CreateTransactionPage } from '../transaction/transaction';\nimport { CreateTimesheetPage } from '../timesheet/timesheet';\n\n@Component({\n    selector: 'page-tabs',\n    templateUrl: 'tabs.html'\n})\nexport class TabsPage {\n\n    public transaction: any;\n    public timesheet: any;\n\n    constructor(public popoverController: PopoverController) {\n        this.transaction = CreateTransactionPage;\n        this.timesheet = CreateTimesheetPage;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/tabs/tabs.ts","import { Component } from '@angular/core';\nimport { NgZone } from '@angular/core';\n\nimport { FormControl } from '@angular/forms';\nimport { FormBuilder } from '@angular/forms';\nimport { FormGroup } from '@angular/forms';\nimport { Validators }           from '@angular/forms';\n\nimport { Events,AlertController }               from 'ionic-angular';\nimport { LoadingController }    from 'ionic-angular';\nimport { ToastController }      from 'ionic-angular';\nimport { Loading }              from 'ionic-angular';\n\nimport { BluetoothResponse }    from '../../models/bluetooth-message';\n\nimport { ConfigurationService } from '../../providers/configuration-service';\nimport { PlantService }         from '../../providers/plant-service';\nimport { TransactionService }   from '../../providers/transaction-service';\nimport { OperatorService }      from '../../providers/operator-service';\nimport { TimesheetService }     from '../../providers/timesheet-service';\nimport { BluetoothService }     from '../../providers/bluetooth-service';\n\nimport { Geolocation }              from 'ionic-native';\n\n@Component({\n    selector: 'page-settings',\n    templateUrl: 'create.html'\n})\nexport class CreateTransactionPage {\n\n    public transactionForm: FormGroup;\n\n    protected operator: any;\n    public plants:Array<any>;\n\n    protected onMeterData:Function;\n    protected onMeterComplete:Function;\n    protected onMeterListing:Function;\n    protected onMeterListingSelect:Function;\n    protected onMeterListingSelected:Function;\n    protected onMeterReading:Function;\n    protected onMeterConnecting:Function;\n    protected onMeterConnected:Function;\n    protected loader:Loading;\n\n\n    constructor(\n        protected builder: FormBuilder,\n        protected loadingController: LoadingController,\n        protected toastController: ToastController,\n        protected configurationService: ConfigurationService,\n        protected plantService: PlantService,\n        protected transactionService: TransactionService,\n        protected operatorService: OperatorService,\n        protected timesheetService: TimesheetService,\n        protected bluetoothService: BluetoothService,\n\n        protected events: Events,\n\n        private zone: NgZone\n    ) {\n\n        this.transactionForm = builder.group({\n            'driver_name':              new FormControl('',     Validators.required),\n            'trailer_id':               new FormControl(''),\n            'plant_id':                 new FormControl('',     Validators.required),\n            'start_value':              new FormControl(''),\n            'end_value':                new FormControl(''),\n            'transaction_end_date':     new FormControl(''),\n        })\n\n        this.events.subscribe('plants:loaded', \n            event => this.populatePlants(event)\n        );\n        this.populatePlants(null);\n\n        this.configurationService.get('operator').then(operator => {\n            console.log('[CreateTransactionPage] - constructor() :: operator:', operator);\n            this.operator = operator;\n            this.transactionForm.patchValue({ driver_name: `${this.operator.first_name} ${this.operator.last_name}` });\n        });\n\n        this.configurationService.get('plant').then(plant_id => {\n            console.log('[CreateTransactionPage] - constructor() :: plant_id:', plant_id);\n            this.transactionForm.patchValue({ plant_id: plant_id });\n        });\n\n        this.onMeterData = (responses) => {\n            this._onMeterData(responses);\n        };\n        this.onMeterComplete = () => {\n            this._onMeterComplete();\n        };\n\n        this.onMeterListing = (event) => {\n            this.loader.setContent('Listing meters.');\n        }\n        this.onMeterListingSelect = (event) => {\n            this.loader.dismiss();\n        }    \n        this.onMeterListingSelected = (event) => {\n            this.loader.present();\n            this.loader.setContent('Meter Selected.');\n        }               \n        this.onMeterConnecting = (event) => {\n            this.loader.setContent('Connecting to meter.');\n        }\n        this.onMeterConnected = (event) => {\n            this.loader.setContent('Connected to meter.');\n        }\n        this.onMeterReading = (event) => {\n            this.loader.setContent('Reading data.');\n        }    \n\n    }\n\n    private populatePlants(events:any)\n    {\n        console.log(`[CreateTransactionPage] - populatePlants() :: Attempt to load plants from cache, with mode ${events}`);\n        this.plantService.findAll().then(\n            data => {\n                console.log(`[CreateTransactionPage] - populatePlants() :: Found ${data.res.rows.length} plants in cache.`);\n                this.plants = [];\n                for(let i = 0; i < data.res.rows.length; i++) {\n                    this.plants.push({\n                        \"plant_id\": data.res.rows.item(i).plant_id,\n                        \"tail_no\":  data.res.rows.item(i).tail_no,\n                    });\n                }\n                console.log(`[CreateTransactionPage] - populatePlants() :: Plants found are ${this.plants}`);\n            }\n        );\n    }\n\n    public openSettings(event) {\n        console.log('[CreateTransactionPage] - openSettings()');\n        this.events.publish('settings:open', event);\n    }\n\n    public readMeter(event) {\n        console.log('[CreateTransactionPage] - readMeter() :: ');\n        \n        this.events.subscribe('meter:listing',      this.onMeterListing);\n        this.events.subscribe('meter:listingselect',      this.onMeterListingSelect);\n        this.events.subscribe('meter:connecting',   this.onMeterConnecting);\n        this.events.subscribe('meter:connected',    this.onMeterConnected);\n        this.events.subscribe('meter:reading',      this.onMeterReading);\n        this.events.subscribe('meter:complete',     this.onMeterComplete);\n        this.events.subscribe('meter:data',         this.onMeterData);\n\n        this.loader = this.loadingController.create({ content: \"Contacting meter.\" });\n        this.loader.present();\n\n        this.bluetoothService.list();\n    }\n\n    public _onMeterComplete():void {\n        //this.events.unsubscribe('meter:complete',   this.onMeterComplete);\n        this.loader.dismiss();\n    }\n\n    public _onMeterData(responses:Array<BluetoothResponse>):void {\n\n        console.log('[CreateTransactionPage] - _onMeterData() :: ', responses);\n\n        // Unsubscribe of further BT data until the Read button pushed again\n        this.events.unsubscribe('meter:data',         this.onMeterData);\n        this.events.unsubscribe('meter:listing',      this.onMeterListing);\n        this.events.unsubscribe('meter:connecting',   this.onMeterConnecting);\n        this.events.unsubscribe('meter:connected',    this.onMeterConnected);\n        this.events.unsubscribe('meter:reading',      this.onMeterReading);\n\n        // Grab the last response, which is the current one, and write it to the UI\n        let response = responses.pop();\n\n        if(!response) {\n            console.warn('[CreateTransactionPage] - _onMeterData() :: Received empty response, exiting.', response);\n            return ;\n        }\n\n        this.zone.run(() => {\n            this.transactionForm.patchValue({ trailer_id:               response.getData().meterID });\n            this.transactionForm.patchValue({ start_value:              response.getData().startVolume });\n            this.transactionForm.patchValue({ end_value:                response.getData().endVolume });\n            this.transactionForm.patchValue({ transaction_end_date:     response.getData().endDateTime });\n        });\n\n        // The rest should be stored and uploaded to the API in the background, with blanking out data we don't know\n        responses.forEach(element => {\n            console.log('[CreateTransactionPage] - _onMeterData() :: Got BT data to upload in the background');\n            let transaction = {\n                pad_id:                 '-1',\n                operator_id:            this.operator.operator_id,\n                battery_percentage:     '-1',\n                long:                   -1,\n                lat:                    -1,\n                transaction_end_date:   element.getData().endDateTime,\n                end_total_value:        element.getData().endVolume,\n                end_value:              element.getData().startVolume,\n                plant_id:               this.transactionForm.controls['plant_id'].value,\n                trailer_id:             response.getData().meterID,\n                odometer:               '-1'\n            };\n            this.transactionService.create( transaction );            \n        });\n        \n        this.onSubmit(this.transactionForm.value);\n    }\n\n    public onSubmit(data) {\n        console.log('[CreateTransactionPage] - onSubmit() :: Attempt to create transaction from data ', data)\n\n        this.configurationService.set('plant', data.plant_id);\n\n        let timestampDate = new Date(); \n        let timestamp = timestampDate.getDate() + \"/\"\n                        + (timestampDate.getMonth()+1)  + \"/\" \n                        + timestampDate.getFullYear() + \" \"  \n                        + timestampDate.getHours() + \":\"  \n                        + timestampDate.getMinutes() + \":\" \n                        + timestampDate.getSeconds();\n\n        let transaction = {\n            pad_id:                 '-1',\n            operator_id:            this.operator.operator_id,\n            battery_percentage:     '-1',\n            long:                   -1,\n            lat:                    -1,\n            transaction_end_date:   data.transaction_end_date,\n            end_total_value:        data.end_value,\n            end_value:              data.start_value,\n            plant_id:               data.plant_id,\n            trailer_id:             data.trailer_id,\n            odometer:               '-1',\n            local_timestamp: timestamp\n        };\n\n\n        let location_request = Geolocation.getCurrentPosition({timeout:10000});\n        location_request.then(\n            (response) => {\n                console.log('[CreateTransactionPage] - onSubmit() :: Got geolocation data, creating transaction ', data)\n                transaction.long = response.coords.longitude;\n                transaction.lat = response.coords.latitude;\n                this.createTransaction(transaction);\n            },\n            (failure) => {\n                console.log('[CreateTransactionPage] - onSubmit() :: Failed to get geolocation ', data)\n                this.createTransaction(transaction);\n            }\n        ).catch(() => {\n            this.createTransaction(transaction);\n        });\n    }\n    \n    public getGPS(){\n        let location_request = Geolocation.getCurrentPosition({timeout:10000});\n        location_request.then(\n            (response) => {\n                let res = JSON.stringify(response);\n                console.log(response);\n            },\n            (failure) => {\n                console.log(failure);\n                let fail = JSON.stringify(failure);\n            }\n        ).catch((e) => {\n                console.log(e);\n        });        \n    }\n    \n    private createTransaction(transaction){\n        this.transactionService.create(transaction).then(\n            result => {\n                this.transactionForm.patchValue({ start_value: null });\n                this.transactionForm.patchValue({ end_value: null });\n                this.transactionForm.patchValue({ trailer_id: null });\n\n                let toast = this.toastController.create({\n                    message: 'Transaction saved!',\n                    duration: 2000\n                });\n                toast.present();\n\n            },\n            failure => {\n                let toast = this.toastController.create({\n                    message: 'Error saving transaction!',\n                    duration: 2000,\n                    cssClass: 'toast-error'\n                });\n                toast.present();\n            }\n        );        \n    }\n    \n    public aircraftChanged(){\n        let toast = this.toastController.create({\n            message: 'Aircraft Changed',\n            duration: 2000\n        });\n        toast.present();        \n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/transaction/transaction.ts","import { Component }            from '@angular/core';\nimport { FormControl }          from '@angular/forms';\nimport { FormBuilder }          from '@angular/forms';\nimport { FormGroup }            from '@angular/forms';\nimport { Validators }           from '@angular/forms';\nimport { Events }               from 'ionic-angular';\nimport { ToastController }      from 'ionic-angular';\n\nimport { PlantService }         from '../../providers/plant-service';\nimport { OperatorService }      from '../../providers/operator-service';\nimport { TimesheetService }     from '../../providers/timesheet-service';\nimport { ConfigurationService } from '../../providers/configuration-service';\n\n@Component({\n    selector: 'page-settings',\n    templateUrl: 'create.html'\n})\nexport class CreateTimesheetPage {\n\n    public timesheetForm: FormGroup;\n\n    private operator: any;\n    public plants:Array<any>;\n\n    constructor(\n        protected events:Events,\n        protected builder: FormBuilder,\n        protected toastController:ToastController,\n        protected plantService: PlantService,\n        protected operatorService: OperatorService,\n        protected timesheetService: TimesheetService,\n        protected configurationService: ConfigurationService) {\n\n        this.timesheetForm = builder.group({\n            'plant_id':         new FormControl('', Validators.required),\n            'start_hours':      new FormControl('', Validators.required),\n            'end_hours':        new FormControl('', Validators.required),\n            'start_date':       new FormControl(''),\n            'end_date':         new FormControl(''),\n        })\n\n        this.timesheetForm.controls['start_hours'].valueChanges.subscribe(\n            data => {\n                console.log('[CreateTimesheetPage] - start_hours.valueChanges() :: Control \"start_hours\" is dirty, patch \"start_date\" timestamp');\n                this.timesheetForm.patchValue({ start_date: Date.now() / 1000 });\n            }\n        );\n\n        this.timesheetForm.controls['end_hours'].valueChanges.subscribe(\n            data => {\n                console.log('[CreateTimesheetPage] - end_hours.valueChanges() :: Control \"end_hours\" is dirty, patch \"end_date\" timestamp');\n                this.timesheetForm.patchValue({ end_date: Date.now() / 1000 });\n            }\n        );\n\n        this.events.subscribe('plants:loaded', \n            event => this.populatePlants(event)\n        );\n        this.populatePlants(null);\n\n        configurationService.get('operator').then(operator => {\n            this.operator = operator;\n        })\n\n        this.configurationService.get('plant').then(plant_id => {\n            console.log('[CreateTimesheetPage] - constructor() :: plant_id: ', plant_id);\n            this.timesheetForm.patchValue({ plant_id: plant_id });\n        });\n    }\n\n    private populatePlants(events:any)\n    {\n        console.log(`[CreateTimesheetPage] - populatePlants() :: Attempt to load plants from cache, with mode ${events}`);\n        this.plantService.findAll().then(\n            data => {\n                console.log(`[CreateTimesheetPage] - populatePlants() :: Found ${data.res.rows.length} plants in cache.`);\n                this.plants = [];\n                for(let i = 0; i < data.res.rows.length; i++) {\n                    this.plants.push({\n                        \"plant_id\": data.res.rows.item(i).plant_id,\n                        \"tail_no\":  data.res.rows.item(i).tail_no,\n                    });\n                }\n                console.log(`[CreateTimesheetPage] - populatePlants() :: Plants found are ${this.plants}`);\n            }\n        );\n    }\n\n    public openSettings(event) {\n        console.log('[CreateTimesheetPage] - openSettings()');\n        this.events.publish('settings:open', event);\n    }\n\n    public onSubmit(data) {\n        console.log('[CreateTimesheetPage] - onSubmit() :: Attempt to create timesheet from data ', data)\n        let timesheet = {\n            plant_id:           data.plant_id,\n            operator_id:        this.operator.operator_id,\n            start_date:         data.start_date,\n            end_date:           data.end_date,\n            start_hours:        data.start_hours,\n            end_hours:          data.end_hours\n        }\n        this.timesheetService.create(timesheet).then(\n            result => {\n                this.timesheetForm.patchValue({ start_hours: null });\n                this.timesheetForm.patchValue({ end_hours: null });\n\n                let toast = this.toastController.create({\n                    message: 'Aircraft hour saved!',\n                    duration: 2000\n                });\n                toast.present();\n\n            },\n            failure => {\n                let toast = this.toastController.create({\n                    message: 'Error saving aircraft hour!',\n                    duration: 2000,\n                    cssClass: 'toast-error'\n                });\n                toast.present();\n            }            \n        );\n    }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/timesheet/timesheet.ts","import { Component }            from '@angular/core';\nimport { ViewController }       from 'ionic-angular';\nimport { Events }               from 'ionic-angular';\n\n@Component({\n  selector: 'page-settings',\n  templateUrl: 'settings.html',\n})\nexport class SettingsPage {\n\n  protected events: Events;\n  protected viewController: ViewController;\n\n  constructor(viewController: ViewController, events: Events) {\n    this.viewController   = viewController;\n    this.events           = events;\n  }\n\n  public refresh() {\n    console.log('[SettingsPage] - refresh() :: ');\n\n    this.events.publish('database:sync');\n    this.viewController.dismiss({ refresh: false });\n\n  }\n\n  public logout() {\n    console.log('[SettingsPage] - logout() :: ');\n    \n    this.events.publish('user:logout');\n    this.viewController.dismiss({ refresh: true });\n\n  }\n\n  public error() {\n    console.log('[SettingsPage] - error() :: ');\n    this.viewController.dismiss({ refresh: true });\n    throw new Error('Something went booboo');\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/settings/settings.ts","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nimport {enableProdMode} from '@angular/core';\n\nenableProdMode();\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n// WEBPACK FOOTER //\n// ./src/app/main.ts","import { NgModule }               from '@angular/core';\nimport { ErrorHandler }           from '@angular/core';\n\nimport { HttpModule }             from '@angular/http';\nimport { Storage }                from '@ionic/storage';\nimport { IonicApp, IonicModule }  from 'ionic-angular';\n\nimport { SQLite }                 from 'ionic-native';\n\nimport { Geolocation }              from 'ionic-native';\n\nimport { FuelITApp }              from './app.component';\n\nimport { LoginPage } from '../pages/login/login';\nimport { SettingsPage } from '../pages/settings/settings';\nimport { TabsPage } from '../pages/tabs/tabs';\nimport { CreateTimesheetPage } from '../pages/timesheet/timesheet';\nimport { CreateTransactionPage } from '../pages/transaction/transaction';\n\nimport { CapitalizePipe } from '../pipes';\nimport { Config } from '../config';\n\nimport { ConfigurationService } from '../providers/configuration-service';\nimport { OperatorService }      from '../providers/operator-service';\nimport { PlantService }         from '../providers/plant-service';\nimport { TimesheetService }     from '../providers/timesheet-service';\nimport { TransactionService }   from '../providers/transaction-service';\nimport { SqlService }           from '../providers/sql-service';\nimport { BluetoothService }     from '../providers/bluetooth-service';\nimport { RollbarErrorHandler }  from '../providers/rollbar-service';\n\n@NgModule({\n  declarations: [\n    FuelITApp,\n    LoginPage,\n    SettingsPage,\n    TabsPage,\n    CreateTimesheetPage,\n    CreateTransactionPage,\n    CapitalizePipe\n  ],\n  imports: [\n    IonicModule.forRoot(FuelITApp, {scrollAssist: false}),\n    HttpModule\n  ],\n  bootstrap: [IonicApp],\n  entryComponents: [\n    FuelITApp,\n    LoginPage,\n    SettingsPage,\n    TabsPage,\n    CreateTimesheetPage,\n    CreateTransactionPage\n  ],\n  providers: [\n    ConfigurationService,\n    OperatorService,\n    PlantService,\n    TimesheetService,\n    TransactionService,\n    SqlService,\n    Config,\n    Storage,\n    SQLite,\n    Geolocation,\n    BluetoothService,\n    { provide: ErrorHandler, useClass: RollbarErrorHandler }\n  ]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component } from '@angular/core';\nimport { ViewChild } from '@angular/core';\n\nimport { Platform }             from 'ionic-angular';\nimport { Events }               from 'ionic-angular';\nimport { ToastController }      from 'ionic-angular';\nimport { PopoverController }    from 'ionic-angular';\nimport { NavController }        from 'ionic-angular';\n\nimport { StatusBar }            from 'ionic-native';\nimport { Network }              from 'ionic-native';\nimport { Splashscreen }         from 'ionic-native';\nimport { Rollbar }              from 'ionic-native';\n\nimport { LoginPage } from '../pages/login/login';\nimport { SettingsPage } from '../pages/settings/settings';\n\nimport { PlantService }         from '../providers/plant-service';\nimport { OperatorService }      from '../providers/operator-service';\nimport { ConfigurationService } from '../providers/configuration-service';\nimport { TransactionService }   from '../providers/transaction-service';\nimport { TimesheetService }     from '../providers/timesheet-service';\nimport { BluetoothService }     from '../providers/bluetooth-service';\n\n@Component({\n    template: `<ion-nav #nav [root]=\"rootPage\"></ion-nav>`\n})\nexport class FuelITApp {\n    @ViewChild('nav') navigationController: NavController\n    public rootPage: any;\n\n    constructor(platform: Platform,\n        protected toastController: ToastController,\n        protected popoverController: PopoverController,\n        protected plantService: PlantService,\n        protected operatorService: OperatorService,\n        protected transactionService: TransactionService,\n        protected timesheetService: TimesheetService,\n        protected configurationService: ConfigurationService,\n        protected bluetoothService: BluetoothService,\n        protected events: Events) {\n\n        this.rootPage = LoginPage;\n\n        this.events.subscribe('database:sync', event => {\n            this.sync();\n        });\n\n        this.events.subscribe('user:logout', event => {\n            this.logout();\n        });\n\n        this.events.subscribe('settings:open', event => {\n            this.settings(event);\n        });\n\n        platform.ready().then(() => {\n\n            StatusBar.styleDefault();\n            Splashscreen.hide();\n            Rollbar.init();\n            \n            \n            \n            console.log('[FuelITApp] - constructor() :: Detecting platforms:', platform.platforms());\n\n            console.log('[FuelITApp] - constructor() :: Preparing services.');\n            Promise.all([\n                this.operatorService.init(),\n                this.plantService.init(),\n                this.transactionService.init(),\n                this.timesheetService.init()        \n            ]).then(\n                result => {\n                    console.log('[FuelITApp] - constructor() :: Services prepared.');\n                    this.sync();\n                    \n                }\n            )\n\n            platform.pause.subscribe(() => {\n                console.log('[FuelITApp] - constructor() :: App paused');\n            });\n\n            platform.resume.subscribe(() => {\n                console.log('[FuelITApp] - constructor() :: App resumed');\n            });\n\n\n            Network.onConnect().subscribe(() => {\n                this.onNetworkConnected();\n            });\n\n            Network.onDisconnect().subscribe(() => {\n                this.onNetworkDisconnected();\n            });\n\n        });\n\n    }\n\n    protected onNetworkConnected() {\n        console.log('[FuelITApp] - onNetworkConnected() :: Network connection detected.');\n        this.events.publish('database:sync');\n    }\n\n    protected onNetworkDisconnected() {\n        console.log('[FuelITApp] - onNetworkDisconnected() :: Network disconnected.');\n    }\n\n    protected settings(event) {\n        let popover = this.popoverController.create(\n            SettingsPage, \n            {\n                transactionService: this.transactionService,\n                timesheetService: this.timesheetService,\n                operatorService: this.operatorService,\n                plantService: this.plantService,\n                configurationService: this.configurationService,\n            },\n            {\n                cssClass: \"popover-settings\"\n            }\n        );\n\n        popover.onDidDismiss(value => {\n            if (value && value.refresh) {\n                this.navigationController.setRoot(LoginPage);\n            }\n        });\n        popover.present({\n            ev: event\n        });\n    }\n\n    protected logout() {\n        console.log('[FuelITApp] - logout() :: Logging out operator.');\n        this.configurationService.remove('operator').then(\n            result => {\n                this.events.publish('user:logged_out');\n            },\n            failuer => {\n\n            }\n        );\n    }\n\n    protected sync() {\n        console.log('[FuelITApp] - sync() :: Synchronizing databases.');\n\n        Promise.all([\n            // configurationService.get('operator'),\n            this.transactionService.upload(),\n            this.timesheetService.upload(),\n            this.operatorService.load(),\n            this.plantService.load(),\n        ])\n            .then(\n            results => {\n                console.log('[FuelITApp] - sync() :: Databases synchronized.');\n                let toast = this.toastController.create({\n                    message: 'Database synced',\n                    duration: 2000\n                });\n                this.events.publish('database:synced');\n                toast.present();\n            },\n            reason => {\n                console.warn('[FuelITApp] - sync() :: Failed to synchronize databases:', reason);\n            }\n            );\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","import {Pipe} from \"@angular/core\";\nimport {PipeTransform} from \"@angular/core\";\n\n@Pipe({name: 'capitalize'})\nexport class CapitalizePipe implements PipeTransform {\n\n    transform(value:any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pipes.ts","import { ErrorHandler } from '@angular/core';\nimport { Injectable }   from '@angular/core';\n\n@Injectable()\nexport class RollbarErrorHandler implements ErrorHandler {\n    handleError(err: any): void {\n        console.error(err);\n        throw Error(err);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/rollbar-service.ts","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class Config {\n  // public API_ENDPOINT = '/api';\n  public API_ENDPOINT = 'https://www.fuel-it.co/AWS15/fitAPI/api';\n  public DATABASE_CONFIG = {\n    name:       'fuelit.db',\n    location:   'default'\n  };\n  public LOCALE = 'en';\n  public DEPARTMENT_ID = 478;\n}\n\n\n// WEBPACK FOOTER //\n// ./src/config.ts","import { Injectable }                           from '@angular/core';\nimport { Storage }                              from '@ionic/storage';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class ConfigurationService {\n\n  protected storage:Storage\n\n  constructor(storage:Storage) {\n    console.log('[ConfigurationService] - constructor() ::');       \n    this.storage = storage;\n  }\n\n  async get(key:string):Promise<any> {\n    console.log('[ConfigurationService] - get() :: ', key);\n    let result = await this.storage.get(key);\n    return new Promise(resolve => {\n      resolve(JSON.parse(result));\n    }) \n  }\n\n  async set(key:string, value:any):Promise<any> {\n    console.log('[ConfigurationService] - set() :: ', key, value)\n    this.storage.set(key, JSON.stringify(value)); \n  }\n\n  async remove(key:string):Promise<any> {\n    return this.storage.remove(key);\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/configuration-service.ts","import 'rxjs/add/operator/map';\nimport { Injectable }   from '@angular/core';\nimport { Http }         from '@angular/http';\nimport { SQLite }       from 'ionic-native';\nimport { AppVersion }   from 'ionic-native';\nimport { Config }       from '../config';\n\nconst win: any = window;\n\n@Injectable()\nexport class SqlService {\n\n  private configuration: Config;\n  private storage: any;\n\n  constructor(private http: Http, configuration: Config) {\n    console.log('[SqlService] - constructor() :: ');\n    this.configuration = configuration;\n    if (win.sqlitePlugin) {\n      console.log('[SqlService] - constructor() :: Creating SQLite service');\n      this.storage = new SQLite();\n\n      Promise.all([\n        AppVersion.getAppName(),\n        AppVersion.getVersionCode(),\n        AppVersion.getVersionNumber(),\n      ]).then(\n          result => {\n            console.log(`[SqlService] - constructor() :: Opening database ${result[0]}.${result[1]}.${result[2]}.db`);\n            this.storage.openDatabase({\n                name:       `${result[0]}.${result[1]}.${result[2]}.db`,\n                location:   'default'\n            });\n          }\n      )\n    }\n    else {\n      console.log('[SqlService] - constructor() :: Creating WebSQL service');\n      this.storage = win.openDatabase(this.configuration.DATABASE_CONFIG.name, '1.0', 'database', 5 * 1024 * 1024);\n    }\n  }\n\n  public executeSql(statement: string, params: any = []): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.storage.transaction((tx: any) => {\n            tx.executeSql(statement, params,\n              (tx: any, res: any) => resolve({tx: tx, res: res}),\n              (tx: any, err: any) => reject({tx: tx, err: err}));\n          },\n          (err: any) => reject({err: err}));\n      } catch (err) {\n        console.warn('[SqlService] - executeSql() :: Error executing statement', statement);  \n        reject({err: err});\n      }\n    });    \n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/sql-service.ts","import 'rxjs/add/operator/toPromise';\nimport { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\nimport { SqlService }   from './sql-service';\nimport { Config }       from './../config';\n\n@Injectable()\nexport class OperatorService {\n\n    private configuration: Config;\n    private storage: SqlService;\n    private http:Http;\n    private in_progress:boolean = false;\n\n    constructor(http:Http, configuration:Config, storage:SqlService) {\n        console.log('[OperatorService] - constructor() :: ');\n        this.http = http;\n        this.configuration = configuration;\n        this.storage = storage;\n    }\n\n    public init() {\n        console.log('[OperatorService] - init() :: Preparing database table');      \n        return this.storage.executeSql('CREATE TABLE IF NOT EXISTS operators (operator_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, pin_no TEXT)');\n    }\n\n    async load() {\n        console.log('[OperatorService] - load() :: Loading operators from the API');\n        \n        if(this.in_progress)\n        {\n            console.log('[OperatorService] - load() :: Loading is already in progress, exit.');\n            return null;\n        }\n\n        this.in_progress = true;\n\n\n        let result = await this.http\n            .get(`${this.configuration.API_ENDPOINT}/operators-dep/${this.configuration.DEPARTMENT_ID}`)\n            .toPromise();\n        console.log('[OperatorService] - load() :: Operators loaded from the API');\n\n        console.log('[OperatorService] - load() :: Deleting operators from the cache');\n        await this.deleteAll();\n        console.log('[OperatorService] - load() :: Operators deleted from the cache');\n\n        console.log('[OperatorService] - load() :: Creating operators in the cache.');\n        let promises = result.json().Operators.map(async (item) => {\n            await this.create(item);\n        });\n        console.info('[OperatorService] - load() :: Operators loaded from the API and cached.');\n        this.in_progress = false;\n        return Promise.all(promises)\n    }\n\n    async find(id: Number) {\n        let query = 'SELECT operator_id, first_name, last_name, pin_no FROM operators WHERE operator_id = (?)';\n        return this.storage.executeSql(query, [id]);\n    }\n\n    async findByPinCode(pin_no: string) {\n        console.log(`[OperatorService] - findByPinCode() :: Attempt to find operator with the PIN ${pin_no}`);\n        let query = 'SELECT operator_id, first_name, last_name, pin_no FROM operators WHERE pin_no = (?)';\n        return this.storage.executeSql(query, [pin_no]);\n    }\n\n    async deleteAll() {\n        return Promise.all([\n            this.storage.executeSql('DELETE FROM operators'),\n            this.storage.executeSql('DELETE FROM SQLITE_SEQUENCE WHERE name=\"operators\"')\n        ]);\n    }\n\n    async create(operator) {\n        let query = 'INSERT INTO operators (operator_id, first_name, last_name, pin_no) VALUES (?, ?, ?, ?)';\n        return this.storage.executeSql(query, [operator.operator_id, operator.first_name, operator.last_name, operator.pin_no]);\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/providers/operator-service.ts"],"sourceRoot":""}